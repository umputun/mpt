// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// GitDiffProcessorMock is a mock implementation of prompt.GitDiffProcessor.
//
//	func TestSomethingThatUsesGitDiffProcessor(t *testing.T) {
//
//		// make and configure a mocked prompt.GitDiffProcessor
//		mockedGitDiffProcessor := &GitDiffProcessorMock{
//			CleanupFunc: func()  {
//				panic("mock out the Cleanup method")
//			},
//			ProcessGitDiffFunc: func(isDiff bool, branchName string) (string, string, error) {
//				panic("mock out the ProcessGitDiff method")
//			},
//			TryBranchDiffFunc: func() (string, string, error) {
//				panic("mock out the TryBranchDiff method")
//			},
//		}
//
//		// use mockedGitDiffProcessor in code that requires prompt.GitDiffProcessor
//		// and then make assertions.
//
//	}
type GitDiffProcessorMock struct {
	// CleanupFunc mocks the Cleanup method.
	CleanupFunc func()

	// ProcessGitDiffFunc mocks the ProcessGitDiff method.
	ProcessGitDiffFunc func(isDiff bool, branchName string) (string, string, error)

	// TryBranchDiffFunc mocks the TryBranchDiff method.
	TryBranchDiffFunc func() (string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Cleanup holds details about calls to the Cleanup method.
		Cleanup []struct {
		}
		// ProcessGitDiff holds details about calls to the ProcessGitDiff method.
		ProcessGitDiff []struct {
			// IsDiff is the isDiff argument value.
			IsDiff bool
			// BranchName is the branchName argument value.
			BranchName string
		}
		// TryBranchDiff holds details about calls to the TryBranchDiff method.
		TryBranchDiff []struct {
		}
	}
	lockCleanup        sync.RWMutex
	lockProcessGitDiff sync.RWMutex
	lockTryBranchDiff  sync.RWMutex
}

// Cleanup calls CleanupFunc.
func (mock *GitDiffProcessorMock) Cleanup() {
	if mock.CleanupFunc == nil {
		panic("GitDiffProcessorMock.CleanupFunc: method is nil but GitDiffProcessor.Cleanup was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCleanup.Lock()
	mock.calls.Cleanup = append(mock.calls.Cleanup, callInfo)
	mock.lockCleanup.Unlock()
	mock.CleanupFunc()
}

// CleanupCalls gets all the calls that were made to Cleanup.
// Check the length with:
//
//	len(mockedGitDiffProcessor.CleanupCalls())
func (mock *GitDiffProcessorMock) CleanupCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCleanup.RLock()
	calls = mock.calls.Cleanup
	mock.lockCleanup.RUnlock()
	return calls
}

// ProcessGitDiff calls ProcessGitDiffFunc.
func (mock *GitDiffProcessorMock) ProcessGitDiff(isDiff bool, branchName string) (string, string, error) {
	if mock.ProcessGitDiffFunc == nil {
		panic("GitDiffProcessorMock.ProcessGitDiffFunc: method is nil but GitDiffProcessor.ProcessGitDiff was just called")
	}
	callInfo := struct {
		IsDiff     bool
		BranchName string
	}{
		IsDiff:     isDiff,
		BranchName: branchName,
	}
	mock.lockProcessGitDiff.Lock()
	mock.calls.ProcessGitDiff = append(mock.calls.ProcessGitDiff, callInfo)
	mock.lockProcessGitDiff.Unlock()
	return mock.ProcessGitDiffFunc(isDiff, branchName)
}

// ProcessGitDiffCalls gets all the calls that were made to ProcessGitDiff.
// Check the length with:
//
//	len(mockedGitDiffProcessor.ProcessGitDiffCalls())
func (mock *GitDiffProcessorMock) ProcessGitDiffCalls() []struct {
	IsDiff     bool
	BranchName string
} {
	var calls []struct {
		IsDiff     bool
		BranchName string
	}
	mock.lockProcessGitDiff.RLock()
	calls = mock.calls.ProcessGitDiff
	mock.lockProcessGitDiff.RUnlock()
	return calls
}

// TryBranchDiff calls TryBranchDiffFunc.
func (mock *GitDiffProcessorMock) TryBranchDiff() (string, string, error) {
	if mock.TryBranchDiffFunc == nil {
		panic("GitDiffProcessorMock.TryBranchDiffFunc: method is nil but GitDiffProcessor.TryBranchDiff was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTryBranchDiff.Lock()
	mock.calls.TryBranchDiff = append(mock.calls.TryBranchDiff, callInfo)
	mock.lockTryBranchDiff.Unlock()
	return mock.TryBranchDiffFunc()
}

// TryBranchDiffCalls gets all the calls that were made to TryBranchDiff.
// Check the length with:
//
//	len(mockedGitDiffProcessor.TryBranchDiffCalls())
func (mock *GitDiffProcessorMock) TryBranchDiffCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTryBranchDiff.RLock()
	calls = mock.calls.TryBranchDiff
	mock.lockTryBranchDiff.RUnlock()
	return calls
}
