// Code generated by enum generator; DO NOT EDIT.
package provider

import (
	"fmt"

	"database/sql/driver"
)

// ProviderType is the exported type for the enum
type ProviderType struct {
	name  string
	value uint8
}

func (e ProviderType) String() string { return e.name }

// Index returns the underlying integer value
func (e ProviderType) Index() uint8 { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e ProviderType) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *ProviderType) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseProviderType(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e ProviderType) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *ProviderType) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range ProviderTypeValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into ProviderType: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid providerType value: %v", value)
		}
	}

	val, err := ParseProviderType(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _providerTypeParseMap is used for efficient string to enum conversion
var _providerTypeParseMap = map[string]ProviderType{
	"unknown":   ProviderTypeUnknown,
	"openai":    ProviderTypeOpenAI,
	"anthropic": ProviderTypeAnthropic,
	"google":    ProviderTypeGoogle,
	"custom":    ProviderTypeCustom,
}

// ParseProviderType converts string to providerType enum value
func ParseProviderType(v string) (ProviderType, error) {

	if val, ok := _providerTypeParseMap[v]; ok {
		return val, nil
	}

	return ProviderType{}, fmt.Errorf("invalid providerType: %s", v)
}

// MustProviderType is like ParseProviderType but panics if string is invalid
func MustProviderType(v string) ProviderType {
	r, err := ParseProviderType(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for providerType values
var (
	ProviderTypeUnknown   = ProviderType{name: "unknown", value: 0}
	ProviderTypeOpenAI    = ProviderType{name: "openai", value: 1}
	ProviderTypeAnthropic = ProviderType{name: "anthropic", value: 2}
	ProviderTypeGoogle    = ProviderType{name: "google", value: 3}
	ProviderTypeCustom    = ProviderType{name: "custom", value: 4}
)

// ProviderTypeValues contains all possible enum values
var ProviderTypeValues = []ProviderType{
	ProviderTypeUnknown,
	ProviderTypeOpenAI,
	ProviderTypeAnthropic,
	ProviderTypeGoogle,
	ProviderTypeCustom,
}

// ProviderTypeNames contains all possible enum names
var ProviderTypeNames = []string{
	"unknown",
	"openai",
	"anthropic",
	"google",
	"custom",
}

// ProviderTypeIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all ProviderType values in declaration order. Example:
//
//	for v := range ProviderTypeIter() {
//	    // use v
//	}
func ProviderTypeIter() func(yield func(ProviderType) bool) {
	return func(yield func(ProviderType) bool) {
		for _, v := range ProviderTypeValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ providerType = providerType(0)
	// This avoids "defined but not used" linter error for providerTypeUnknown
	var _ providerType = providerTypeUnknown
	// This avoids "defined but not used" linter error for providerTypeOpenAI
	var _ providerType = providerTypeOpenAI
	// This avoids "defined but not used" linter error for providerTypeAnthropic
	var _ providerType = providerTypeAnthropic
	// This avoids "defined but not used" linter error for providerTypeGoogle
	var _ providerType = providerTypeGoogle
	// This avoids "defined but not used" linter error for providerTypeCustom
	var _ providerType = providerTypeCustom
	return true
}()
